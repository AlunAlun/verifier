{"mappings":"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","sources":["src/FreeverseIdentity.js"],"sourcesContent":["// Copyright (c) 2021 Freeverse.io <dev@freeverse.io>\n// Library for creating and managing indentities that can hold assets.\n// Account creation and derivation follows Crypto-JS\n// Account export follows AES Standard to encrypt/decrypt private keys.\n\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst Accounts = require('web3-eth-accounts').default;\nconst CryptoJS = require('crypto-js').default;\nconst EthCrypto = require('eth-crypto');\n\n// Use a an AES-Standard KDF (Key Derivation Function) to generate (IV, key) from (password, salt)\n// This is a standard step that makes brute-force attacks much harder\nconst applyKDF = (password, salt) => {\n  const keyBytes = CryptoJS.PBKDF2(password, salt, { keySize: 48 / 4, iterations: 1000 });\n  // take first 32 bytes as key\n  const key = CryptoJS.lib.WordArray.create(keyBytes.words, 32);\n  // skip first 32 bytes and take next 16 bytes as IV\n  const iv = CryptoJS.lib.WordArray.create(keyBytes.words.splice(32 / 4), 16);\n  return {\n    key,\n    iv,\n  };\n};\n\n// Returns a Web3 Account with a brand new pair (privateKey/user_id)\n// capable of signing on behalf of privateKey\nconst createNewAccount = () => new Accounts().create();\n\n// Returns a Web3 Account from a given privateKey,\n// capable of signing on behalf of privateKey\nconst accountFromPrivateKey = (privKey) => {\n  try {\n    return new Accounts().privateKeyToAccount(privKey);\n  } catch {\n    throw new Error('Private Key does not have correct format');\n  }\n};\n\n/**\n * Returns the public freeverseID corresponding to the provided private key.\n * The freeverseID can be shared. The Private key should never leave the user's control.\n * @deprecated since version 1.0.7\n */\nconst freeverseIdFromPrivateKey = (privKey) => {\n  const account = accountFromPrivateKey(privKey);\n  return account.address;\n};\n\n/**\n * Returns the public freeverseID corresponding to the provided private key.\n * The freeverseID can be shared. The Private key should never leave the user's control.\n */\nconst web3AddressFromPrivateKey = (privKey) => {\n  const account = accountFromPrivateKey(privKey);\n  return account.address;\n};\n\n// Generates an Encrypted Identity, which is the concat of:\n// - salt (32b)\n// - the encryption of hte provided private key using the provided user password\n// The encryption the AES standard with an AES recommended KDF.\n// The user should store the Encrypted Identity in a safe place,\n// an attacker would need access to it as well as knowledge of the user-entered password.\nconst encryptIdentity = (pvk, password) => {\n  const salt = CryptoJS.lib.WordArray.random(16);\n  // generate (IV, key) from an AES-secure Key Derivation Function\n  const kdf = applyKDF(password, salt);\n  const pvkNoTrail = (pvk.slice(0, 2) === '0x') ? pvk.slice(2) : pvk;\n  const pvkWords = CryptoJS.enc.Hex.parse(pvkNoTrail);\n  const encrypted = CryptoJS.AES.encrypt(pvkWords, kdf.key, { iv: kdf.iv });\n  return salt.concat(encrypted.ciphertext).toString(CryptoJS.enc.Hex);\n};\n\n// Decryption of an encrypted private key, given a user-entered password, following AES standard.\nconst decryptIdentity = (encryptedIdentity, password) => {\n  // An encrypted Identity is a hex-formatted string, which is the concat of:\n  // ...salt (32bit)\n  const salt = CryptoJS.enc.Hex.parse(encryptedIdentity.slice(0, 32));\n  // ..and encrypted private key\n  const cipherText = CryptoJS.enc.Hex.parse(encryptedIdentity.slice(32));\n\n  // generate (IV, key) from an AES-secure Key Derivation Function, and decrypt\n  const kdf = applyKDF(password, salt);\n  const plaintextArray = CryptoJS.AES.decrypt(\n    {\n      ciphertext: cipherText,\n      salt: '',\n    },\n    kdf.key,\n    {\n      iv: kdf.iv,\n    },\n  );\n  const privKey = `0x${plaintextArray.toString(CryptoJS.enc.Hex)}`;\n\n  // Before returning, check that a valid account can be generated from this privKey\n  // Otherwise: throw.\n  try {\n    web3AddressFromPrivateKey(privKey);\n  } catch {\n    throw new Error('The Encrypted ID and Password entered do not match');\n  }\n  return privKey;\n};\n\n// encrypts a string so that it can only be decrypted\n// by the owner of the privKey that corresponds to the publicKey\nconst encryptWithPublicKey = async (textToEncrypt, publicKey) => {\n  // obtaining an object with the encrypted data\n  const encryptedObject = await EthCrypto.encryptWithPublicKey(\n    publicKey,\n    textToEncrypt,\n  );\n  // converting the encrypted object into a encrypted String\n  const encryptedString = EthCrypto.cipher.stringify(encryptedObject);\n  return encryptedString;\n};\n\n// decrypts a string that was encrypted for a given publicKey\nconst decryptWithPrivateKey = async (encryptedString, privateKey) => {\n  // converting the encypted String into an encrypted object\n  const encryptedObject = EthCrypto.cipher.parse(encryptedString);\n  // decrypt the en encrypted object with the private key\n  const decrypted = await EthCrypto.decryptWithPrivateKey(\n    privateKey,\n    encryptedObject,\n  );\n  return decrypted;\n};\n\nconst publicKeyFromPrivateKey = (privKey) => EthCrypto.publicKeyByPrivateKey(privKey);\n\nmodule.exports = {\n  freeverseIdFromPrivateKey,\n  web3AddressFromPrivateKey,\n  encryptIdentity,\n  decryptIdentity,\n  createNewAccount,\n  accountFromPrivateKey,\n  encryptWithPublicKey,\n  decryptWithPrivateKey,\n  publicKeyFromPrivateKey,\n};\n"],"names":[],"version":3,"file":"main.js.map"}